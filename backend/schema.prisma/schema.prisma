generator client {
model FacturaRecurrente {
id Int @id @default(autoincrement())
empresaId Int
empresa Empresa @relation(fields: [empresaId], references: [id])
clienteId Int
cliente Cliente @relation(fields: [clienteId], references: [id])
descripcion String
monto Decimal @db.Decimal(12,2)
frecuencia String // p.ej.: "mensual"
nextDate DateTime
activa Boolean @default(true)
}


model Empleado {
id Int @id @default(autoincrement())
empresaId Int
empresa Empresa @relation(fields: [empresaId], references: [id])
nombre String
cedula String
puesto String
salarioBrutoMensual Decimal @db.Decimal(12,2)
fechaIngreso DateTime
activo Boolean @default(true)
}


model Nomina {
id String @id // YYYY-MM
empresaId Int
empresa Empresa @relation(fields: [empresaId], references: [id])
periodo String // YYYY-MM
empleadosJson Json // arreglo de NominaEmpleado
totalPagado Decimal @db.Decimal(12,2)
totalCostoEmp Decimal @db.Decimal(12,2)
status NominaStatus @default(PendienteAuditoria)
asientoId String?
generadoPor Json
auditTrail Json?
}


model AsientoContable {
id String @id
empresaId Int
empresa Empresa @relation(fields: [empresaId], references: [id])
fecha DateTime
descripcion String
transaccionId String
transaccionTipo String
entradas Json // [{ cuentaId, descripcion, debito, credito }]
}


model BankTransaction {
id String @id
empresaId Int
empresa Empresa @relation(fields: [empresaId], references: [id])
fecha DateTime
descripcion String
monto Decimal @db.Decimal(12,2)
tipo String // "credito" | "debito"
}


model ReconciliationMatch {
id Int @id @default(autoincrement())
empresaId Int
bankTransaction BankTransaction @relation(fields: [bankTransactionId], references: [id])
bankTransactionId String
recordType String // 'factura' | 'gasto' | 'ingreso'
recordId Int
status String // 'sugerido' | 'confirmado'
}